syntax = "proto3";
package freezonex.openiiot_api;

import "freezonex/common/api.proto";
import "freezonex/common/base_resp.proto";
import "freezonex/common/base_req.proto";
//option go_package = "freezonex/openiiot/biz/model/openiiot_api_service";

message DataSource {
    int64 id = 1;
    string uid = 2;
    string name = 3;
    string type = 4;
    string typeLogoUrl = 5;
    string url = 6;
    string access = 7;
    bool readOnly = 8;
    string database = 9;
    string user = 10;
    int64 orgId = 11;
    bool isDefault = 12;
    bool basicAuth = 13;
    string basicAuthUser = 14;
    bool withCredentials = 15;
    // JSONData and SecureJSONData can be represented as string in key-value format
    // or you can define a more complex structure if needed
    string jsonData = 16;
    string secureJsonData = 17;
    int32 version = 18;
}

message GrafanaDSN {
  string host = 1;
  string username = 2;
  string password = 3;
}

message DashboardMeta {
  bool isStarred = 1;
  string slug = 2;
  int64 folderId = 3;
  string folderUid = 4;
  string url = 5;
}

message Dashboard {
  // we use a string to represent the serialized JSON structure.
  string model = 1;
  int64 folderId = 2;
  DashboardMeta meta = 3;
  bool overwrite = 4;
  string message = 5;
  string folderUid = 6;
}

message DashboardSaveResponse {
  string slug = 1;
  int64 id = 2;
  string uid = 3;
  string status = 4;
  int64 version = 5;
}

message GrafanaAuthorizeRequest {
  string redirect_uri = 1 [(api.query) = 'redirect_uri'];
  string state = 2 [(api.query) = 'state'];
}

message GrafanaAuthorizeResponse {
  base_resp.BaseResponse base_resp = 1;
}

message GrafanaAccessTokenRequest {
  string code = 1;
  string grant_type = 2;
  string redirect_uri = 3;
}

message GrafanaAccessTokenResponse {
  base_resp.BaseResponse base_resp = 1;
  string access_token = 2;
  string token_type = 3;
  int32 expires_in = 4;
  string refresh_token = 5;
}

message GrafanaUserRequest {
  string authorization = 1 [(api.header) = 'Authorization'];
}

message GrafanaUserResponse {
  base_resp.BaseResponse base_resp = 1;
  string sub = 2;
  string email = 3;
  string name = 4;
  repeated string role = 5;
}

/*message GrafanaSearchUserRequest {
  string loginOrEmail = 1 [(api.param) = 'Authorization'];
}

message GrafanaSearchUserResponse {
  base_resp.BaseResponse base_resp = 1;
  string sub = 2;
  string email = 3;
  string name = 4;
  repeated string role = 5;
}*/

message GrafanaDataSourcesRequest {
  GrafanaDSN dsn = 1;
}

message GrafanaDataSourcesResponse {
  base_resp.BaseResponse base_resp = 1;
  repeated DataSource dataSources = 2;
}

message GrafanaCreateDataSourceRequest {
  GrafanaDSN dsn = 1;
  DataSource dataSource = 2;
}

message GrafanaCreateDataSourceResponse {
  base_resp.BaseResponse base_resp = 1;
  string message = 2;
}
message GrafanaDeleteDataSourceRequest {
  GrafanaDSN dsn = 1;
  string name = 2;
}
message GrafanaDeleteDataSourceResponse {
  base_resp.BaseResponse base_resp = 1;
  string message = 2;
}

message GrafanaCreateDashboardRequest {
  GrafanaDSN dsn = 1;
  Dashboard dashboard = 2;
}

message GrafanaCreateDashboardResponse {
  base_resp.BaseResponse base_resp = 1;
  DashboardSaveResponse saveResponse = 2;
}

message GrafanaSaveDashboardByUidRequest {
  GrafanaDSN dsn = 1;
  string uid = 2;
  string savePath = 3;
}

message GrafanaSaveDashboardByUidResponse {
  base_resp.BaseResponse base_resp = 1;
  string message= 2;
}